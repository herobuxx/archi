# Maintainer : JPratama7 <josepratama080@gmail.com>
# Contributor: Joan Figueras <ffigue at gmail dot com>
# Contributor: Torge Matthies <openglfreak at googlemail dot com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>


_microarchitecture=93
use_numa=y
use_tracers=y
_compiler=clang
_compress_modules=y
_localmodcfg=n
_makenconfig=n

if [ "${_compiler}" = "clang" ]; then
  _compiler_flags="CC=clang HOSTCC=clang LLVM=1 LLVM_IAS=1"
fi

pkgbase=linux-custorizer
_major=6.11
pkgver=${_major}.3
_branch=6.x
xanmod=1
pkgrel=${xanmod}
pkgdesc='Linux Kernel - Current Stable (CURRENT) with Custom Patches'
url="http://www.xanmod.org/"
arch=(x86_64)
_lucjan="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_major}/"
_cachy="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/${_major}/"
_tkg="https://raw.githubusercontent.com/Frogging-Family/linux-tkg/master/linux-tkg-patches/${_major}/"
_xanmod="https://gitlab.com/xanmod/linux-patches/-/raw/master/linux-6.11.y-xanmod/"
_commit_ck=2870d6ac146aa658af60bb18a9c7503efe5992d4

_bore=5.6.1

license=(GPL2)
makedepends=(
  bc cpio kmod libelf perl tar xz
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(llvm-all python)
fi
options=('!strip')
_srcname="linux-${pkgver}-xanmod${xanmod}"

source=("https://cdn.kernel.org/pub/linux/kernel/v${_branch}/linux-${pkgver}.tar."{xz,sign}
        "https://cdn.kernel.org/pub/linux/kernel/projects/rt/$_major/patch-$_major-rt7.patch."{xz,sign}
        "choose-gcc-optimization.sh"

        "https://github.com/firelzrd/bore-scheduler/raw/refs/heads/main/patches/stable/linux-$_major-bore/0001-linux$_major.y-bore$_bore.patch"
        
        # Xanmod Feature
        "${_xanmod}binder/0001-binder-turn-into-module.patch"
        "${_xanmod}binder/0002-binder-give-binder_alloc-its-own-debug-mask-file.patch"
        "${_xanmod}binder/0003-wait-allow-to-use-__wake_up_pollfree-from-GPL-module.patch"
        "${_xanmod}binder/0004-file-export-file_close_fd-instead-of-close_fd_get_fi.patch"
        "${_xanmod}clearlinux/0001-sched-wait-Do-accept-in-LIFO-order-for-cache-efficie.patch"
        "${_xanmod}clearlinux/0002-firmware-Enable-stateless-firmware-loading.patch"
        "${_xanmod}clearlinux/0003-locking-rwsem-spin-faster.patch"
        "${_xanmod}clearlinux/0004-drivers-initialize-ata-before-graphics.patch"
        "${_xanmod}net/mac80221/0001-mac80211-ignore-AP-power-level-when-tx-power-type-is.patch"
        "${_xanmod}net/netfilter/0001-netfilter-Add-netfilter-nf_tables-fullcone-support.patch"
        "${_xanmod}net/netfilter/0002-netfilter-add-xt_FLOWOFFLOAD-target.patch"
        "${_xanmod}net/tcp/cloudflare/0001-tcp-Add-a-sysctl-to-skip-tcp-collapse-processing-whe.patch"
        "${_xanmod}pci_acso/0001-PCI-Enable-overrides-for-missing-ACS-capabilities.patch"
        "${_xanmod}userns/0001-sysctl-add-sysctl-to-disallow-unprivileged-CLONE_NEW.patch"
        "${_lucjan}bbr3-patches/0001-tcp-bbr3-initial-import.patch"
        "${_lucjan}ntsync-patches-all/0001-ntsync-patches.patch"
        "${_lucjan}futex-patches/0001-futex-6.11-Add-entry-point-for-FUTEX_WAIT_MULTIPLE-o.patch"

        "${_cachy}misc/0001-amd-hfi.patch"

        "${_lucjan}amd-pstate-patches-v4-all/0001-amd-pstate-patches.patch"
        "${_lucjan}intel-pstate-patches-all/0001-intel-pstate-patches.patch"
        "${_lucjan}le9uo-patches/0001-mm-6.11-add-le9uo.patch"
        "${_lucjan}cachyos-fixes-patches-v6/0001-cachyos-fixes-patches.patch"
        "${_lucjan}eevdf-patches-v6/0001-sched-6.11-merge-changes-from-dev-tree.patch"
        "${_lucjan}schedutil-patches/0001-schedutil-6.11-merge-changes-from-dev-tree.patch"

        "${_lucjan}kbuild-patches/0001-kbuild-patches.patch"
        "${_lucjan}mm-patches/0001-mm-patches.patch"
        "${_lucjan}uksmd-patches-v2/0001-uksmd-patches.patch"
        "${_lucjan}powercap-patches/0001-powercap-intel_rapl-Add-support-for-AMD-family-1Ah.patch"
        "${_lucjan}arch-patches/0001-arch-patches.patch"
        "${_lucjan}v4l2loopback-patches/0001-media-v4l2-core-add-v4l2loopback-driver.patch"
        "${_lucjan}zstd-cachyos-patches/0001-zstd-cachyos-patches.patch"

        "${_lucjan}openvpn-patches-v2-all/0001-openvpn-patches.patch"
        "${_lucjan}perf-patches/0001-perf-6.11-merge-changes-from-dev-tree.patch"
        "${_lucjan}amd-cache-optimizer-patches/0001-amd-cache-optimizer-patches.patch"
        "${_lucjan}cpu-cachyos-patches-v6/0001-cpu-cachyos-patches.patch"

        "${_tkg}0013-optimize_harder_O3.patch"
        "${_cachy}misc/0001-acpi-call.patch"
        "${_tkg}0003-glitched-base.patch"
        )
        #"patch-${pkgver}-xanmod${xanmod}.xz::https://sourceforge.net/projects/xanmod/files/releases/stable/${pkgver}-xanmod${xanmod}/patch-${pkgver}-xanmod${xanmod}.xz/download"

# Archlinux patches
_commit="ec9e9a4219fe221dec93fa16fddbe44a34933d8d"
_patches=()
for _patch in ${_patches[@]}; do
    #source+=("${_patch}::https://git.archlinux.org/svntogit/packages.git/plain/trunk/${_patch}?h=packages/linux&id=${_commit}")
    source+=("${_patch}::https://raw.githubusercontent.com/archlinux/svntogit-packages/${_commit}/trunk/${_patch}")
done

sha256sums=('57b2cf6991910e3b67a1b3490022e8a0674b6965c74c12da1e99d138d1991ee8'
            'SKIP'
            'SKIP'
            '1ac18cad2578df4a70f9346f7c6fccbb62f042a0ee0594817fdef9f2704904ee')

export KBUILD_BUILD_HOST=${KBUILD_BUILD_HOST:-archlinux}
export KBUILD_BUILD_USER=${KBUILD_BUILD_USER:-makepkg}
export KBUILD_BUILD_TIMESTAMP=${KBUILD_BUILD_TIMESTAMP:-$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})}

apply_patch() {
    local src="$1"
    local output
    local exit_code

    echo "Applying patch: $src"

    set +e
    output=$(patch -Np1 -r - -F2 -v --input="../$src" 2>&1)
    exit_code=$?
    set -e

    echo "$output"

    # Check the exit code of the patch command
    if [ $exit_code -ne 0 ]; then
        # Check if the output contains "Skipping patch"
        if echo "$output" | grep -q "Skipping patch"; then
            echo "Patch already applied: $src"
            return 0
        else
            echo "Error applying patch: $src"
            echo "Patch command output:"
            echo "$output"
            return $exit_code
        fi
    fi

    echo "Patch applied successfully: $src"
    return 0
}

prepare() {
  mv linux-${pkgver} linux-${_major}
  cd linux-${_major}

  msg2 "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux-xanmod}" > localversion.20-pkgname

  msg2 "Applying RT patch"
  apply_patch patch-6.11-rt7.patch
  ls

  # Archlinux patches
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    apply_patch $src
    apply_patch $src
    # OUT="$(patch -Np1 -F2 --input="../$src" -r -)" || echo "${OUT}" | grep "Skipping patch" -q || (echo "$OUT" && false);
  done

  # Applying configuration
  msg2 "Copy configuration"
  echo "Setting config..."

  # EROFS as module
  scripts/config --module CONFIG_EROFS_FS

  # enable BORE Scheduler
  scripts/config -e CONFIG_SCHED_BORE

  scripts/config  --set-val X86_64_VERSION 1

  # enable LTO_CLANG_THIN
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enabling LTO CLANG"
    scripts/config \
            -e LTO \
            -e LTO_CLANG \
            -e ARCH_SUPPORTS_LTO_CLANG \
            -e ARCH_SUPPORTS_LTO_CLANG_THIN \
            -d CONFIG_LTO_NONE \
            -e HAS_LTO_CLANG \
            -e CONFIG_LTO_CLANG_FULL \
            -e HAVE_GCC_PLUGINS
  fi

  # CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
  msg2 "Enable STACK VALIDATION"
  scripts/config -e CONFIG_STACK_VALIDATION

  # Enable IKCONFIG following Arch's philosophy
  msg2 "Enable IKCONFIG"
  scripts/config -e CONFIG_IKCONFIG \
                 -e CONFIG_IKCONFIG_PROC

  # User set. See at the top of this file
  if [ "$use_tracers" = "n" ]; then
    msg2 "Disabling FUNCTION_TRACER/GRAPH_TRACER only if we are not compiling with clang..."
    if [ "${_compiler}" = "gcc" ]; then
      scripts/config -d CONFIG_FUNCTION_TRACER \
                     -d CONFIG_STACK_TRACER
    fi
  fi

  if [ "$use_numa" = "n" ]; then
    msg2 "Disabling NUMA..."
    scripts/config -d NUMA \
                   -d AMD_NUMA \
                   -d X86_64_ACPI_NUMA \
                   -d NODES_SPAN_OTHER_NODES \
                   -d NUMA_EMU \
                   -d NEED_MULTIPLE_NODES \
                   -d USE_PERCPU_NUMA_NODE_ID \
                   -d ACPI_NUMA \
                   -d ARCH_SUPPORTS_NUMA_BALANCING \
                   -d NODES_SHIFT \
                   --undefine NODES_SHIFT \
                   -d NEED_MULTIPLE_NODES
  fi

  # Compress modules by default (following Arch's kernel)
  if [ "$_compress_modules" = "y" ]; then
    msg2 "Compress Modules"
    scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19 \
                   -e CONFIG_MODULE_COMPRESS_ZSTD_ULTRA \
                   --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL_ULTRA 22 \
                   --set-val CONFIG_ZSTD_COMP_VAL 22
    msg2 "Done Compress Modules"
  fi

  msg2 "Set HOSTNAME"
  scripts/config --set-val CONFIG_DEFAULT_HOSTNAME "CUSTORIZER"

  msg2 "AMD PSTATE"
  scripts/config  -e CONFIG_X86_AMD_PSTATE

  msg2 "Enable v4l2loopback support"
  scripts/config -e CONFIG_V4L2_LOOPBACK

  msg2 "Enable WINE FASTSYNC"
  scripts/config -e WINESYNC

  msg2 "Enabling FULLCONENAT..."
  scripts/config --module IP_NF_TARGET_FULLCONENAT \
                 --module NETFILTER_XT_TARGET_FULLCONENAT
  

  msg2 "Enabling KBUILD_CFLAGS -O3..."
  scripts/config -d CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE \
                 -e CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3


  msg2 "Disabling TCP_CONG_CUBIC..."
  scripts/config --module TCP_CONG_CUBIC \
                 -d DEFAULT_CUBIC \
                 -e TCP_CONG_BBR2 \
                 -e DEFAULT_BBR2 \
                 --set-str DEFAULT_TCP_CONG bbr2

  # BBR2 doesn't work properly with FQ_CODEL
  msg2 "Disabling fq_codel by default..."
  scripts/config --module NET_SCH_FQ_CODEL \
                 -e NET_SCH_FQ \
                 -d DEFAULT_FQ_CODEL \
                 -e DEFAULT_FQ \
                 --set-str DEFAULT_NET_SCH fq

  msg2 "Disabling TCP_CONG_CUBIC..."
  scripts/config --module CONFIG_TCP_CONG_CUBIC \
                 -d CONFIG_DEFAULT_CUBIC

  msg2 "Enabling multigenerational LRU..."
  scripts/config -e CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG \
                 -e CONFIG_LRU_GEN \
                 -e CONFIG_LRU_GEN_ENABLED \
                 -d CONFIG_LRU_GEN_STATS

  msg2 "Enabling DAMON Data Access Monitoring "
  scripts/config -e CONFIG_DAMON \
                 -e CONFIG_DAMON_VADDR \
                 -e CONFIG_DAMON_DBGFS \
                 -e CONFIG_DAMON_SYSFS \
                 -e CONFIG_DAMON_PADDR \
                 -e CONFIG_DAMON_RECLAIM \
                 -e CONFIG_DAMON_LRU_SORT

  msg2 "Change zram zswap compression to ZSTD"
  scripts/config -d CONFIG_ZRAM_DEF_COMP_LZORLE \
                 -e CONFIG_ZRAM_DEF_COMP_ZSTD \
                 --set-str CONFIG_ZRAM_DEF_COMP zstd \
                 -d CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                 -e CONFIG_ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                 --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT zstd

  msg2 "Enable Anbox"
  scripts/config -e CONFIG_ASHMEM \
                 -e CONFIG_ANDROID \
                 -e CONFIG_ANDROID_BINDER_IPC \
                 -e CONFIG_ANDROID_BINDERFS \
                 -e CONFIG_ANDROID_BINDER_DEVICES="binder,hwbinder,vndbinder"

  msg2 "Enable NTFS + NTFS3"
  scripts/config --module CONFIG_NTFS_FS \
                 --module CONFIG_NTFS3_FS \
                 -e CONFIG_NTFS3_64BIT_CLUSTER \
                 -e CONFIG_NTFS3_LZX_XPRESS \
                 -e CONFIG_NTFS3_FS_POSIX_ACL

  # Let's user choose microarchitecture optimization in GCC
  # Use default microarchitecture only if we have not choosen another microarchitecture
  if [ "$_microarchitecture" -ne "0" ]; then
    "$srcdir"/choose-gcc-optimization.sh $_microarchitecture
  fi

  # This is intended for the people that want to build this package with their own config
  # Put the file "myconfig" at the package folder (this will take preference) or "${XDG_CONFIG_HOME}/linux-xanmod/myconfig"
  # If we detect partial file with scripts/config commands, we execute as a script
  # If not, it's a full config, will be replaced
  for _myconfig in "${SRCDEST}/myconfig" "${HOME}/.config/linux-xanmod/myconfig" "${XDG_CONFIG_HOME}/linux-xanmod/myconfig" ; do
    if [ -f "${_myconfig}" ] && [ "$(wc -l <"${_myconfig}")" -gt "0" ]; then
      if grep -q 'scripts/config' "${_myconfig}"; then
        # myconfig is a partial file. Executing as a script
        msg2 "Applying myconfig..."
        bash -x "${_myconfig}"
      else
        # myconfig is a full config file. Replacing default .config
        msg2 "Using user CUSTOM config..."
        cp -f "${_myconfig}" .config
      fi
      echo
      break
    fi
  done

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ "$_localmodcfg" = "y" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make ${_compiler_flags} LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit 1
    fi
  fi

  msg2 "make ${_compiler_flags} olddefconfig"
  make ${_compiler_flags} olddefconfig
  #diff -u CONFIGS/xanmod/gcc/${_config} .config || :

  make -s kernelrelease > version
  msg2 "Prepared %s version %s" "$pkgbase" "$(<version)"

  if [ "$_makenconfig" = "y" ]; then
    make ${_compiler_flags} nconfig
  fi

  # save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd linux-${_major}
  make ${_compiler_flags} all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The Linux kernel and modules with Xanmod patches"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES
            WIREGUARD-MODULE
            KSMBD-MODULE
            NTFS3-MODULE
            V4L2LOOPBACK-MODULE)

  cd linux-${_major}
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  msg2 "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg2 "Installing modules..."
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd linux-${_major}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  msg2 "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  msg2 "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg2 "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  msg2 "Removing documentation..."
  rm -r "$builddir/Documentation"

  msg2 "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg2 "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg2 "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg2 "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  msg2 "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et: